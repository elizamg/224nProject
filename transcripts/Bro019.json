{
    "meeting_id": "Bro019",
    "transcript": "now we 're on . Yes . Yes . For you it is . Uh , your mike number 's written on the back of that unit there . And then the channel number 's usually one less than that . It - it 's one less than what 's written on the back of your yeah . So you should be zero , actually . For your uh , channel number . So what we usually do is um , we typically will have our meetings and then at the end of the meetings we 'll read the digits . Everybody goes around and reads the digits on the the bottom of their forms . Yeah . We 're This is session R - nineteen . Sunil 's here for the summer ? I could say a few words about um , some of the uh , compute stuff that 's happening around here , so that people in the group know . OK . We um So we just put in an order for about twelve new machines , uh , to use as sort of a compute farm . And um , uh , we ordered uh , SUN - Blade - one - hundreds , and um , I 'm not sure exactly how long it 'll take for those to come in , but , uh , in addition , we 're running So the plan for using these is , uh , we 're running P - make and Customs here and Andreas has sort of gotten that all uh , fixed up and up to speed . And he 's got a number of little utilities that make it very easy to um , run things using P - make and Customs . You don't actually have to write P - make scripts and things like that . The simplest thing And I can send an email around or , maybe I should do an FAQ on the web site about it or something . Um , there 's a c Yeah , yeah . Uh , there 's a command , uh , that you can use called \" run command \" . \" Run dash command \" , \" run hyphen command \" . And , if you say that and then some job that you want to execute , uh , it will find the fastest currently available machine , and export your job to that machine , and uh and run it there and it 'll duplicate your environment . So you can try this as a simple test with uh , the L S command . So you can say \" run dash command L S \" , and , um , it 'll actually export that LS command to some machine in the institute , and um , do an LS on your current directory . So , substitute LS for whatever command you want to run , and um And that 's a simple way to get started using using this . And , so , soon , when we get all the new machines up , um , e then we 'll have lots more compute to use . Now th one of the nice things is that uh , each machine that 's part of the P - make and Customs network has attributes associated with it . Uh , attributes like how much memory the machine has , what its speed is , what its operating system , and when you use something like \" run command \" , you can specify those attributes for your program . For example if you only want your thing to run under Linux , you can give it the Linux attribute , and then it will find the fastest available Linux machine and run it on that . So . You can control where your jobs go , to a certain extent , all the way down to an individual machine . Each machine has an attribute which is the name of itself . So you can give that as an attribute and it 'll only run on that . If there 's already a job running , on some machine that you 're trying to select , your job will get queued up , and then when that resource , that machine becomes available , your job will get exported there . So , there 's a lot of nice features to it and it kinda helps to balance the load of the machines and uh , right now Andreas and I have been the main ones using it and we 're Uh . The SRI recognizer has all this P - make customs stuff built into it . So . Yeah . Exactly . Yeah , you know , I I sort of got started using the recognizer just recently and uh , uh I fired off a training job , and then I fired off a recognition job and I get this email about midnight from Andreas saying , \" uh , are you running two trainings simultaneously s my m my jobs are not getting run . \" So I had to back off a little bit . But , soon as we get some more machines then uh then we 'll have more compute available . So , um , that 's just a quick update about what we 've got . So . Mm - hmm . Mm - hmm . You could write a script uh , which called run command on each sub - job right ? But you probably wanna be careful with that because um , you don't wanna saturate the network . Uh , so , um , you know , you should you should probably not run more than , say ten jobs yourself at any one time , uh , just because then it would keep other people Well it 's not that so much as that , you know , e with if everybody ran fifty jobs at once then it would just bring everything to a halt and , you know , people 's jobs would get delayed , so it 's sort of a sharing thing . Um , so you should try to limit it to somet sometim some number around ten jobs at a time . Um . So if you had a script for example that had a thousand things it needed to run , um , you 'd somehow need to put some logic in there if you were gonna use \" run command \" , uh , to only have ten of those going at a time . And uh , then , when one of those finished you 'd fire off another one . Um , Mm - hmm . Mm - hmm . Mm - hmm . Yeah . Yeah . Yep . Yeah , exactly . Yeah , you have to be a little bit careful . Um , but uh , you can also If you have that level of parallelization um , and you don't wanna have to worry about writing the logic in in a Perl script to take care of that , you can use um , P - make and and you basically write a Make file that uh , you know your final job depends on these one thousand things , and when you run P - make , uh , on your Make file , you can give it the dash capital J and and then a number , and that number represents how many uh , machines to use at once . And then it 'll make sure that it never goes above that . So , I can get some documentation . It depends . If you \" Run command \" , that I mentioned before , is doesn't know about other things that you might be running . So , it would be possible to run a hundred run jobs at once , and they wouldn't know about each other . But if you use P - make , then , it knows about all the jobs that it has to run and it can control , uh , how many it runs simultaneously . It uses \" export \" underlyingly . But , if you i It 's meant to be run one job at a time ? So you could fire off a thousand of those , and it doesn't know any one of those doesn't know about the other ones that are running . Well , if you have , um Like , for example , uh if you didn't wanna write a P - make script and you just had a , uh an HTK training job that you know is gonna take uh , six hours to run , and somebody 's using , uh , the machine you typically use , you can say \" run command \" and your HTK thing and it 'll find another machine , the fastest currently available machine and and run your job there . Yes . Yeah , there are um Right . So some of the machines at the institute , um , have this attribute called \" no evict \" . And if you specify that , in in one of your attribute lines , then it 'll go to a machine which your job won't be evicted from . But , the machines that don't have that attribute , if a job gets fired up on that , which could be somebody 's desktop machine , and and they were at lunch , they come back from lunch and they start typing on the console , then your machine will get evicted your job will get evicted from their machine and be restarted on another machine . Automatically . So which can cause you to lose time , right ? If you had a two hour job , and it got halfway through and then somebody came back to their machine and it got evicted . So . If you don't want your job to run on a machine where it could be evicted , then you give it the minus the attribute , you know , \" no evict \" , and it 'll pick a machine that it can't be evicted from . So . Mm - hmm . Yeah , I I 'm not sure how that works . Uh , it seems like Andreas did something for that . Um . But Yeah . I don't know whether it monitors the keyboard or actually looks at the console TTY , so maybe if you echoed something to the you know , dev dev console or something . Hmm ? Yeah , yeah . Yeah . Yeah , so , um , yeah . I I can I 'm not sure about that one . But uh . OK . Um . Yeah . Yeah , and and also uh , Stephane 's a a really good resource for that if you can't find me . Especially with regard to the Aurora stuff . He he knows that stuff better than I do . Are y are you saying LDA ? LDA . OK . Mm - hmm . So people won't even have to worry about , uh , doing speech - nonspeech then . Mmm . I see . Yeah , I see . Yeah . Mm - hmm . So , are people supposed to assume that there is uh Are are people not supposed to use any speech outside of those endpoints ? Or can you then use speech outside of it for estimating background noise and things ? OK . Wow . So the baseline itself improves by fifty percent . Wow . Yeah . Perfect to match . It 's it 's not guaranteed though . Is it is spectral subtraction typically done on the after the mel , uh , scaling or is it done on the FFT bins ? Does it matter , or ? Oh . Hmm . Hmm . Mmm . I see . Hmm . I don't not that I know of . That 's right Wi - with what targets ? Phones . Mmm . Oh . So you 're not down here permanently yet ? Ah ! Oh , OK . So you just You typically just get a few roots ? You know , two or three , something like that ? Mm - hmm . How did If this is synthetic speech can't you just get the formants directly ? I mean h how is the speech created ? Wasn't a formant synthesizer was it ? Oh , I see . That 's sort of the point . Yeah . I guess we should do digits quickly . You wanna go ahead ? Transcript L dash one four three eight nine seven four nine one six eight six two one nine four eight nine nine four eight eight six one one six one nine two five nine two six eight three nine eight four eight zero zero six zero seven six five one five two six two one seven eight seven five four two nine two five four nine eight seven four two seven eight three two nine seven two three two one six six seven five two six two OK ."
}